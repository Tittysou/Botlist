<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Bot - Bots.gg</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        discord: {
                            100: '#e0e1e5',
                            900: '#23272A'
                        }
                    }
                }
            }
        }
    </script>
    <style>
        /* Custom scrollbar styles */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: rgba(31, 41, 55, 0.5);
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb {
            background: rgba(59, 130, 246, 0.5);
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: rgba(59, 130, 246, 0.7);
        }

        /* Markdown preview styles */
        .markdown-preview {
            line-height: 1.6;
        }

        .markdown-preview h1 {
            font-size: 1.5rem;
            font-weight: bold;
            margin: 1rem 0;
        }

        .markdown-preview h2 {
            font-size: 1.25rem;
            font-weight: bold;
            margin: 0.875rem 0;
        }

        .markdown-preview p {
            margin: 0.75rem 0;
        }

        .markdown-preview ul, .markdown-preview ol {
            margin: 0.75rem 0;
            padding-left: 1.5rem;
        }

        .markdown-preview ul {
            list-style-type: disc;
        }

        .markdown-preview ol {
            list-style-type: decimal;
        }

        .markdown-preview code {
            background: rgba(31, 41, 55, 0.5);
            padding: 0.2rem 0.4rem;
            border-radius: 0.25rem;
            font-family: monospace;
        }

        .markdown-preview pre {
            background: rgba(31, 41, 55, 0.5);
            padding: 1rem;
            border-radius: 0.5rem;
            overflow-x: auto;
            margin: 0.75rem 0;
        }

        .markdown-preview pre code {
            background: none;
            padding: 0;
        }

        /* Toast notification styles */
        .toast {
            visibility: hidden;
            min-width: 250px;
            margin-left: -125px;
            background-color: rgba(59, 130, 246, 0.9);
            color: white;
            text-align: center;
            border-radius: 8px;
            padding: 16px;
            position: fixed;
            z-index: 1000;
            left: 50%;
            bottom: 30px;
        }

        .toast.show {
            visibility: visible;
            animation: fadein 0.5s, fadeout 0.5s 2.5s;
        }

        @keyframes fadein {
            from {bottom: 0; opacity: 0;}
            to {bottom: 30px; opacity: 1;}
        }

        @keyframes fadeout {
            from {bottom: 30px; opacity: 1;}
            to {bottom: 0; opacity: 0;}
        }
    </style>
</head>
<body class="bg-gradient-to-br from-gray-900 to-black min-h-screen text-gray-100 antialiased">
    <!-- Navigation -->
    <nav class="fixed w-full z-50 bg-gray-900/80 backdrop-blur-lg border-b border-gray-800">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex items-center justify-between h-16">
                <a href="/" class="flex items-center space-x-3">
                    <span class="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-indigo-500">
                        Bots.gg
                    </span>
                </a>
                
                <div class="hidden md:flex items-center space-x-4">
                    <% if (user) { %>
                        <span class="text-gray-400">Welcome, <span class="text-blue-400"><%= user.username %></span></span>
                        <a href="/submit" class="inline-flex items-center px-4 py-2 rounded-lg bg-blue-600 hover:bg-blue-700 text-white transition-colors">
                            Add Bot
                        </a>
                        <a href="/logout" class="text-gray-300 hover:text-white transition-colors">Logout</a>
                    <% } else { %>
                        <a href="/auth/discord" class="inline-flex items-center px-4 py-2 rounded-lg bg-indigo-600 hover:bg-indigo-700 text-white transition-colors">
                            Login with Discord
                        </a>
                    <% } %>
                </div>

                <!-- Mobile menu button -->
                <div class="md:hidden">
                    <button type="button" id="mobile-menu-button" class="text-gray-300 hover:text-white">
                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
                        </svg>
                    </button>
                </div>
            </div>

            <!-- Mobile menu -->
            <div id="mobile-menu" class="hidden md:hidden pb-3 space-y-1">
                <% if (user) { %>
                    <span class="block px-3 py-2 text-gray-400">Welcome, <span class="text-blue-400"><%= user.username %></span></span>
                    <a href="/submit" class="block px-3 py-2 text-gray-300 hover:text-white">Add Bot</a>
                    <a href="/logout" class="block px-3 py-2 text-gray-300 hover:text-white">Logout</a>
                <% } else { %>
                    <a href="/auth/discord" class="block px-3 py-2 text-gray-300 hover:text-white">Login with Discord</a>
                <% } %>
            </div>
        </div>
    </nav>

    <!-- Edit Form Section -->
    <div class="pt-28 pb-20 px-4">
        <div class="max-w-3xl mx-auto">
            <h1 class="text-3xl font-bold text-center mb-8 bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-indigo-500">
                Edit Your Bot
            </h1>

            <form id="editBotForm" action="/bots/<%= bot.botID %>/edit" method="POST" class="space-y-6">
                <div class="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50">
                    <!-- Client ID -->
                    <div class="mb-6">
                        <label for="botID" class="block text-sm font-medium text-gray-300 mb-2">Client ID</label>
                        <input type="text" id="botID" name="botID" value="<%= bot.botID %>" readonly 
                               class="w-full bg-gray-900/50 border border-gray-700 rounded-lg px-4 py-2 text-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50">
                    </div>

                    <!-- Prefix -->
                    <div class="mb-6">
                        <label for="prefix" class="block text-sm font-medium text-gray-300 mb-2">Prefix</label>
                        <input type="text" id="prefix" name="prefix" value="<%= bot.prefix %>" required 
                               class="w-full bg-gray-900/50 border border-gray-700 rounded-lg px-4 py-2 text-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50">
                    </div>

                    <!-- URLs -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="backURL" class="block text-sm font-medium text-gray-300 mb-2">Invite URL</label>
                            <input type="url" id="backURL" name="backURL" value="<%= bot.backURL %>" required 
                                   class="w-full bg-gray-900/50 border border-gray-700 rounded-lg px-4 py-2 text-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50"
                                   pattern="https?://.+">
                        </div>
                        <div>
                            <label for="supportURL" class="block text-sm font-medium text-gray-300 mb-2">Support URL</label>
                            <input type="url" id="supportURL" name="supportURL" value="<%= bot.supportURL %>" 
                                   class="w-full bg-gray-900/50 border border-gray-700 rounded-lg px-4 py-2 text-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50"
                                   pattern="https?://.+">
                        </div>
                        <div>
                            <label for="websiteURL" class="block text-sm font-medium text-gray-300 mb-2">Website URL</label>
                            <input type="url" id="websiteURL" name="websiteURL" value="<%= bot.websiteURL %>" 
                                   class="w-full bg-gray-900/50 border border-gray-700 rounded-lg px-4 py-2 text-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50"
                                   pattern="https?://.+">
                        </div>
                        <div>
                            <label for="githubURL" class="block text-sm font-medium text-gray-300 mb-2">GitHub URL</label>
                            <input type="url" id="githubURL" name="githubURL" value="<%= bot.githubURL %>" 
                                   class="w-full bg-gray-900/50 border border-gray-700 rounded-lg px-4 py-2 text-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50"
                                   pattern="https?://github\.com/.+">
                        </div>
                        <div class="md:col-span-2">
                            <label for="webhookURL" class="block text-sm font-medium text-gray-300 mb-2">Webhook URL</label>
                            <input type="url" id="webhookURL" name="webhookURL" value="<%= bot.webhookURL %>" 
                                   class="w-full bg-gray-900/50 border border-gray-700 rounded-lg px-4 py-2 text-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50"
                                   pattern="https?://discord\.com/api/webhooks/.+">
                        </div>
                    </div>

                    <!-- Tags -->
                    <div class="mt-8">
                        <label class="block text-sm font-medium text-gray-300 mb-4">Tags</label>
                        <div class="flex flex-wrap gap-3" id="tagsContainer">
                            <% const tags = ['moderation', 'fun', 'minecraft', 'economy', 'guard', 'nsfw', 'anime', 'invite', 'music', 'logging', 'web_dashboard', 'reddit', 'youtube', 'twitch', 'crypto', 'leveling', 'game', 'roleplay', 'utility', 'giveaway', 'starboard', 'daily']; %>
                            <% tags.forEach(tag => { %>
                                <label class="inline-flex items-center cursor-pointer group">
                                    <input type="checkbox" name="tags" value="<%= tag %>" 
                                           <%= bot.tags.includes(tag) ? 'checked' : '' %>
                                           class="form-checkbox h-4 w-4 text-blue-500 border-gray-700 rounded focus:ring-blue-500 bg-gray-900/50">
                                    <span class="ml-2 text-sm text-gray-300 group-hover:text-gray-100 transition-colors"><%= tag.charAt(0).toUpperCase() + tag.slice(1) %></span>
                                </label>
                            <% }); %>
                        </div>
                        <p class="mt-2 text-sm text-gray-400" id="tagCount">Selected tags: <span>0</span>/6</p>
                    </div>

                    <!-- Descriptions -->
                    <div class="mt-8">
                        <div class="mb-6">
                            <label for="shortDesc" class="block text-sm font-medium text-gray-300 mb-2">Short Description</label>
                            <textarea id="shortDesc" name="shortDesc" required rows="3"
                                      class="w-full bg-gray-900/50 border border-gray-700 rounded-lg px-4 py-2 text-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50"
                                      maxlength="200"><%= bot.shortDesc %></textarea>
                            <p class="mt-1 text-sm text-gray-400" id="shortDescCount">0/200 characters</p>
                        </div>
                        
                        <div class="relative">
                            <div class="flex items-center justify-between mb-2">
                                <label for="longDesc" class="block text-sm font-medium text-gray-300">Long Description</label>
                                <button type="button" id="previewButton" 
                                        class="text-sm text-blue-400 hover:text-blue-300 transition-colors">
                                    Preview Markdown
                                </button>
                            </div>
                            <div id="longDescContainer">
                                <textarea id="longDesc" name="longDesc" required rows="8"
                                          class="w-full bg-gray-900/50 border border-gray-700 rounded-lg px-4 py-2 text-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50"
                                          minlength="200" maxlength="2000"><%= bot.longDesc %></textarea>
                                          0/2000 characters</p>
                                        </div>
                                        <div id="markdownPreview" class="hidden w-full h-full bg-gray-900/50 border border-gray-700 rounded-lg px-4 py-2 text-gray-300 markdown-preview">
                                        </div>
                                    </div>
                                </div>
            
                                <!-- Submit Button -->
                                <div class="mt-8">
                                    <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg transition-colors duration-200 flex items-center justify-center">
                                        <span id="submitText">Update Bot</span>
                                        <svg id="submitSpinner" class="hidden animate-spin ml-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            
                <!-- Toast Notification -->
                <div id="toast" class="toast">
                    Changes saved successfully!
                </div>
            
                <!-- Scripts -->
                <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
                <script>
                    document.addEventListener('DOMContentLoaded', function() {
                        // Mobile menu toggle
                        const mobileMenuButton = document.getElementById('mobile-menu-button');
                        const mobileMenu = document.getElementById('mobile-menu');
                        
                        mobileMenuButton.addEventListener('click', () => {
                            const isHidden = mobileMenu.classList.contains('hidden');
                            mobileMenu.classList.toggle('hidden', !isHidden);
                        });
            
                        // Form handling
                        const form = document.getElementById('editBotForm');
                        const submitText = document.getElementById('submitText');
                        const submitSpinner = document.getElementById('submitSpinner');
                        const toast = document.getElementById('toast');
            
                        // Character counters
                        const shortDesc = document.getElementById('shortDesc');
                        const longDesc = document.getElementById('longDesc');
                        const shortDescCount = document.getElementById('shortDescCount');
                        const longDescCount = document.getElementById('longDescCount');
            
                        function updateCharCount(element, counter) {
                            const count = element.value.length;
                            const max = element.getAttribute('maxlength');
                            counter.textContent = `${count}/${max} characters`;
                        }
            
                        shortDesc.addEventListener('input', () => updateCharCount(shortDesc, shortDescCount));
                        longDesc.addEventListener('input', () => updateCharCount(longDesc, longDescCount));
            
                        // Initialize character counts
                        updateCharCount(shortDesc, shortDescCount);
                        updateCharCount(longDesc, longDescCount);
            
                        // Tags counter
                        const tagsContainer = document.getElementById('tagsContainer');
                        const tagCount = document.getElementById('tagCount');
                        const maxTags = 6;
            
                        function updateTagCount() {
                            const checkedTags = tagsContainer.querySelectorAll('input[type="checkbox"]:checked').length;
                            tagCount.querySelector('span').textContent = checkedTags;
                            
                            // Disable unchecked boxes if max is reached
                            const checkboxes = tagsContainer.querySelectorAll('input[type="checkbox"]:not(:checked)');
                            checkboxes.forEach(checkbox => {
                                checkbox.disabled = checkedTags >= maxTags;
                            });
                        }
            
                        tagsContainer.addEventListener('change', updateTagCount);
                        updateTagCount(); // Initialize count
            
                        // Markdown preview
                        const previewButton = document.getElementById('previewButton');
                        const longDescContainer = document.getElementById('longDescContainer');
                        const markdownPreview = document.getElementById('markdownPreview');
                        let isPreviewMode = false;
            
                        previewButton.addEventListener('click', () => {
                            isPreviewMode = !isPreviewMode;
                            
                            if (isPreviewMode) {
                                const markdown = longDesc.value;
                                markdownPreview.innerHTML = marked.parse(markdown);
                                longDescContainer.classList.add('hidden');
                                markdownPreview.classList.remove('hidden');
                                previewButton.textContent = 'Edit';
                            } else {
                                longDescContainer.classList.remove('hidden');
                                markdownPreview.classList.add('hidden');
                                previewButton.textContent = 'Preview Markdown';
                            }
                        });
            
                        // Form submission
                        form.addEventListener('submit', async (e) => {
                            e.preventDefault();
            
                            // Validate form
                            const checkedTags = tagsContainer.querySelectorAll('input[type="checkbox"]:checked').length;
                            if (checkedTags === 0 || checkedTags > maxTags) {
                                alert(`Please select between 1 and ${maxTags} tags.`);
                                return;
                            }
            
                            // Show loading state
                            submitText.textContent = 'Updating...';
                            submitSpinner.classList.remove('hidden');
            
                            try {
                                const formData = new FormData(form);
                                const response = await fetch(form.action, {
                                    method: 'POST',
                                    body: formData
                                });
            
                                if (!response.ok) {
                                    throw new Error('Network response was not ok');
                                }
            
                                // Show success toast
                                toast.classList.add('show');
                                setTimeout(() => {
                                    toast.classList.remove('show');
                                }, 3000);
            
                            } catch (error) {
                                console.error('Error:', error);
                                alert('An error occurred while saving changes. Please try again.');
                            } finally {
                                // Reset button state
                                submitText.textContent = 'Update Bot';
                                submitSpinner.classList.add('hidden');
                            }
                        });
            
                        // URL validation
                        const urlInputs = document.querySelectorAll('input[type="url"]');
                        urlInputs.forEach(input => {
                            input.addEventListener('input', function() {
                                if (this.value && !this.value.startsWith('http')) {
                                    this.value = 'https://' + this.value;
                                }
                            });
                        });
                    });
                </script>
            </body>
            </html>